# Travis CI (MIT License) configuration file for Subtitles WordPress Plugin
# @link https://travis-ci.org/

# For use with the Subtitles WordPress Plugin
# @link https://github.com/professionalthemes/Subtitles

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Ditch sudo and use containers.
# http://docs.travis-ci.com/user/migrating-from-legacy/?utm_source=legacy-notice&utm_medium=banner&utm_campaign=legacy-upgrade
sudo: false

# Declare versions of PHP to use. Use one decimal max.
php:
    - "7.0"
    - "5.6"
    - "5.5"
    - "5.4"
    - "5.3"
    # Current $required_php_version for WordPress: 5.2.4
    - "5.2"

# Declare which versions of WordPress to test against.
# Also declare whether or not to test in Multisite.
env:
    # Trunk (current version in development is 4.4)
    # @link https://github.com/WordPress/WordPress
    - WP_VERSION=master WP_MULTISITE=0
    - WP_VERSION=master WP_MULTISITE=1
    # WordPress 4.3
    # @link https://github.com/WordPress/WordPress/tree/4.3-branch
    - WP_VERSION=4.3 WP_MULTISITE=0
    - WP_VERSION=4.3 WP_MULTISITE=1
    # WordPress 4.2
    # @link https://github.com/WordPress/WordPress/tree/4.2-branch
    - WP_VERSION=4.2 WP_MULTISITE=0
    - WP_VERSION=4.2 WP_MULTISITE=1

# Declare 7.0 in test matrix.
# @link https://core.trac.wordpress.org/changeset/33443
# @link http://docs.travis-ci.com/user/build-configuration/
matrix:
    include:
        - php: 7.0
          env: WP_VERSION=master
    allow_failures:
        - php: 7.0
    fast_finish: true

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
# before_install:

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
    # Set up WordPress installation.
    - export WP_DEVELOP_DIR=/tmp/wordpress/
    - mkdir -p $WP_DEVELOP_DIR
    # Use the Git mirror of WordPress.
    - git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
    # Set up Subtitles plugin information.
    - plugin_slug=$(basename $(pwd))
    - plugin_dir=$WP_DEVELOP_DIR/src/wp-content/plugins/$plugin_slug
    - cd ..
    - mv $plugin_slug $plugin_dir
    # Set up WordPress configuration.
    - cd $WP_DEVELOP_DIR
    - echo $WP_DEVELOP_DIR
    - cp wp-tests-config-sample.php wp-tests-config.php
    - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
    - sed -i "s/yourusernamehere/root/" wp-tests-config.php
    - sed -i "s/yourpasswordhere//" wp-tests-config.php
    # Create WordPress database.
    - mysql -e 'CREATE DATABASE wordpress_test;' -uroot
    # Install CodeSniffer for WordPress Coding Standards checks.
    - git clone https://github.com/squizlabs/PHP_CodeSniffer.git php-codesniffer
    # Install WordPress Coding Standards.
    - mkdir wordpress-coding-standards && curl -L https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/archive/master.tar.gz | tar xz --strip-components=1 -C wordpress-coding-standards
    # Hop into CodeSniffer directory.
    - cd php-codesniffer
    # Set install path for WordPress Coding Standards
    # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
    - scripts/phpcs --config-set installed_paths ../wordpress-coding-standards
    # Hop into plugins directory.
    - cd $plugin_dir
    # After CodeSniffer install you should refresh your path.
    - phpenv rehash
    # Install JSCS: JavaScript Code Style checker
    - npm install -g jscs
    # Install JSHint, a JavaScript Code Quality Tool
    - npm install -g jshint

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # phpunit configuration file
    # @link https://github.com/sebastianbergmann/phpunit/
    - phpunit --configuration phpunit.config.xml
    # Search for PHP syntax errors.
    - find . \( -name '*.php' \) -exec php -lf {} \;
    # Run the plugin through JSHint
    - jshint .
    # Run the plugin through JavaScript Code Style checker
    - jscs .
    # WordPress Coding Standards
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings (shortcut for --warning-severity=0)
    # --standard: Use WordPress as the standard.
    # --extensions: Only sniff PHP files.
    # localhost: /Applications/XAMPP/xamppfiles/htdocs/develop/php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php
    - $WP_DEVELOP_DIR/php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php


# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    email: false
    slack:
      secure: ea3t+gmzyFStYmV7ohU7O0ENm1JQ94IUi/S7PgSLlieXhunChWPJnW7lbgG8x/fFlPZmXRA3ZdaRzyyPG1nUpQePKM1VGWqKpMzGpwxXAgdwZfbJD4s/fPm/ddtrULaR5wYl9JMfzvotra/6u1bFNSqXpznY9z/0z7/AOFFaveA/s2wxtESi+5Vvo0p7qxX7DRtkOVkS4lFPVk7N7l/5n+uT5Pie1nATejqrrhJEzK8MrPZtvO5rYz9A0GOrNIYcjl51ZeCEpbHyqiZ+Z67ouG04BGgQ02a0H3gmMKVyuQ2lIc96hyrWgoFmwMVRV7QjI97S8OYtEFtzBTkwdhZUwXhAvk1ijsMkrdm/elkGtfSYfFge9qSvn81mpfpYkI2byeBwQj0lbI6V9o8RP+pGfpmUGlbWqyxOLb0Upr2nla3gKVECjCIcfKQ6ZAQRdyAeo03T5rVPPOxsJYUygEMINcgTPVmexyfpFJLomlY7N+GyanrcB4A5fEf74FvJ9KnDgfTlePlFIav+gpF4OemxxTfff/Igw5tF7hPNXccSOHV68Hfx1gsWZ7s9n2MXvgsbp902aTzMQzJFphAmUXKPdFInIr5fQihe1iK+rhFXUKSrIXwdCpo1aOEm25cnl+N+/rIKy7QTX8+R3dBR7FzXXgbehUcw/xZjlSxrrhgAB1M=
